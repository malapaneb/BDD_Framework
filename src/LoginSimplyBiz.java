package platforms.ui.Web.StepDefinitions;

import cucumber.api.java.Before;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import org.junit.BeforeClass;
import org.openqa.selenium.By;
import org.testng.Assert;
import utils.ObjMethod;
import utils.Utils;
import utils.clsConstants;

public class LoginSimplyBiz extends Utils {

    private String  xmlLogin = "src/test/java/objectrepository/Login.xml";


    @Given("^User \"([^\"]*)\" enters username \"([^\"]*)\" and password \"([^\"]*)\"$")
    public void user_enters_username_and_password(String arg1, String arg2, String arg3) throws Throwable {
        String email = null;

        switch (arg2) {
            case "AutoGenerated":
                email = readtxtFile( "NewCustomerEmailAdress.txt");

           //     email  = clsConstants.NewcustomerEmail;
                break;
            case "DefaultAdmin":
                email = getConfigPropertyValue("./Framework.properties", "SimplybizAdminUser");
                break;
            default:
                email = arg2;
        }

   /*     if (arg2.equalsIgnoreCase("AutoGenerated"))
        {  email  = clsConstants.NewcustomerEmail;}
        else {email = arg2;}*/
        Thread.sleep(1000);
        ObjMethod.click("iconQuest",xmlLogin);
        ObjMethod.setText("email",email,xmlLogin);
        ObjMethod.setText("password",arg3,xmlLogin);
    }

    @When("^User clicks on Log in button$")
    public void user_clicks_on_Log_in_button() throws Throwable {
        ObjMethod.click("loginbtn",xmlLogin);
    }

    @Then("^User Logged in Successfully$")
    public void user_Logged_in_Successfully() throws Throwable {
   /*    for (int i = 0; i<=5;i++) {
           Thread.sleep(1000);
           try {
               if (clsConstants.driver.findElement(By.xpath("//a[@id='go-to-lifecycle']")).isDisplayed()) {

                //   clsConstants.driver.findElement(By.xpath("//a[@id='go-to-lifecycle']")).click();
              //     clsConstants.driver.navigate().back();
                         clsConstants.driver.findElement(By.xpath("//span[contains(text(),'Ã—')]")).click();
               }
           } catch (Exception e) {
           }
       }*/
        Thread.sleep(3000);
        String getprop =  ObjMethod.getProperty("profilebtn","title",xmlLogin);
        Assert.assertNotEquals("Quest",getprop);
        System.out.println(getprop);

    }

//comment
    @Given("^User navigates to Dashboard and selects System and then message queue$")
    public void user_navigates_to_Dashboard_and_selects_System_and_then_message_queue() throws Throwable {
        clsConstants.driver.findElement(By.xpath("/html/body/div[3]/div[2]/div/ul/li[8]/a/span")).click();
        clsConstants.driver.findElement(By.xpath("/html/body/div[3]/div[2]/div/ul/li[8]/ul/li[5]/a/span")).click();


    }

    @Given("^User enters to email \"([^\"]*)\"$")
    public void user_enters_to_email(String arg1) throws Throwable {
        String email = null;

        if (arg1.equalsIgnoreCase("AutoGenerated"))
        {  email  = clsConstants.NewcustomerEmail;}
        else {email = arg1;}
            clsConstants.driver.findElement(By.xpath("//*[@id=\"SearchToEmail\"]")).sendKeys(email);
            clsConstants.driver.findElement(By.xpath("//*[@id=\"search-queuedemails\"]")).click();
    }

    @Then("^Message queue displays the email, timestamp from and to$")
    public void message_queue_displays_the_email_timestamp_from_and_to() throws Throwable {

        //*[@id="queuedEmails-grid"]/table

        String getText = clsConstants.driver.findElement(By.xpath("//*[@id='queuedEmails-grid']/table/tbody/tr/td[8]")).getAttribute("innerText");

        if (getText.equalsIgnoreCase(""))
        {
            Assert.assertEquals(1,0);
        }
        else
        {
            Assert.assertEquals(1,1);
        }
      //  Assert.assertNotEquals("",getText);
    }


}
